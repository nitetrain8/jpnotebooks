/**/HTMLPreview.loadJS({"query":{"count":1,"created":"2018-01-10T19:29:13Z","lang":"en-US","diagnostics":{"url":[{"execution-start-time":"0","execution-stop-time":"1","execution-time":"1","content":"https://raw.githubusercontent.com/yql/yql-tables/master/data/data.headers.xml"},{"execution-start-time":"3","execution-stop-time":"42","execution-time":"39","content":"https://raw.githubusercontent.com/avanderhoorn/Semantic-Release-Notes/master/js/script.js"}],"publiclyCallable":"true","log":"response length: 11762","javascript":{"execution-start-time":"2","execution-stop-time":"43","execution-time":"41","instructions-used":"38663","table-name":"headers"},"user-time":"44","service-time":"40","build-version":"2.0.241"},"results":{"resources":{"url":"https://raw.githubusercontent.com/avanderhoorn/Semantic-Release-Notes/master/js/script.js","status":"200","headers":{"result":{"content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","strict-transport-security":"max-age=31536000","x-content-type-options":"nosniff","x-frame-options":"deny","x-xss-protection":"1; mode=block","etag":"\"0160c15035f52e07f300675526c2388fc4088676\"","content-type":"text/plain; charset=utf-8","cache-control":"max-age=300","x-geo-block-list":null,"x-github-request-id":"528C:100FE:303C4F:3354B5:5A566989","content-encoding":"gzip","content-length":"2617","accept-ranges":"bytes","via":"1.1 varnish, https/1.1 ecq2.ycs.gq1.yahoo.com (ApacheTrafficServer [cMsSfW])","x-served-by":"cache-sea1051-SEA","x-cache":"MISS","x-cache-hits":"0","x-timer":"S1515612554.642420,VS0,VE34","vary":"Authorization,Accept-Encoding","access-control-allow-origin":"*","x-fastly-request-id":"72e53ff825e2de35171161a2b19dc7fc6717d9e7","expires":"Wed, 10 Jan 2018 19:34:13 GMT","source-age":"0","date":"Wed, 10 Jan 2018 19:29:13 GMT","age":"0","connection":"keep-alive","server":"ATS"}},"content":"/* Author:\n\n*/\n\nif (typeof String.prototype.endsWith !== 'function') {\n    String.prototype.endsWith = function(suffix) {\n        return this.indexOf(suffix, this.length - suffix.length) !== -1;\n    };\n}\n\nif (typeof String.prototype.titleize !== 'function') {\n    String.prototype.titleize = function() {\n      var words = this.split(' ')\n      var array = []\n      for (var i=0; i<words.length; ++i) {\n        array.push(words[i].charAt(0).toUpperCase() + words[i].toLowerCase().slice(1))\n      }\n      return array.join(' ')\n    };\n}\n\nvar processSyntax = (function () {\n    var linkProcessor = {\n            pattern : /\\[\\[(\\S+)\\]\\[(\\S+)\\]\\]/i,\n            process : function (input, obj) {\n                var match =  this.pattern.exec(input);\n                        \n                if (match) {\n                    if ($.isArray(obj)) {\n                        obj.push(match[1]);\n                        obj.push(match[2]);\n                    }\n                    else\n                        obj[match[1]] = match[2];\n                }\n                        \n                return obj;\n            }\n        },\n        lineProcessor = {\n            options : [{ \n                pattern : /^# ([\\w\\s*]*)/i,\n                test : function (input) {\n                    return this.pattern.test(input);\n                },\n                process : function (obj, input) {\n                    var title = this.pattern.exec(input),\n                        links = linkProcessor.process(input, {}),\n                        feature = { items : [] };\n                            \n                    feature.name = title[1];\n                    if (links.icon)\n                        feature.icon = links.icon;\n                            \n                    // Store results \n                    if (!obj.sections)\n                        obj.sections = []; \n                    obj.sections.push(feature);\n                }\n            },\n            {\n                pattern : /^ [\\-\\+\\*]|([123])\\. /i, \n                categoryPattern : /\\+([\\w-]+)/i,\n                test : function (input) {\n                    return this.pattern.test(input);\n                },\n                process : function (obj, input) {\n                    var priority = this.pattern.exec(input),\n                        links = linkProcessor.process(input, []),\n                        item = {};\n                            \n                    if (priority && !isNaN(priority[1])) \n                        item.priority =  priority[1]; \n                    input = input.replace(this.pattern, '');\n                    \n                    if (links.length > 0) {\n                        item.taskId = links[0];\n                        item.teskLink = links[1];\n                        input = input.replace(linkProcessor.pattern, '').trim();\n                    }\n                    \n                    // handle categories\n                    \n                    var category;\n                    while(category = this.categoryPattern.exec(input)) {\n                        if(!item.categories) {\n                            item.categories = [];\n                        }\n                        item.categories.push(category[1].replace('-', ' ').titleize());\n                        var replacement = category[1];\n                        if(input.endsWith(category[1])) {\n                            replacement = '';\n                        }\n                        input = input.replace(this.categoryPattern, replacement);\n                    }\n                    \n                    item.summary = input.trim();\n\n                    // Store results \n                    if (!obj.sections) {\n                        if (!obj.items)\n                            obj.items = [];\n                        obj.items.push(item);\n                    }\n                    else \n                        obj.sections[obj.sections.length - 1].items.push(item); \n                }\n            }],\n            primary : {\n                pattern : /^[a-zA-Z0-9]/i,\n                process : function (obj, input, nextInput) { \n                    var item = obj;\n                    if (obj.sections) \n                        item = obj.sections[obj.sections.length - 1];\n\n                    if (!item.summary)\n                        item.summary = ''; \n\n                    input = input.trim();\n                    if (input === '' && nextInput && this.pattern.test(nextInput))\n                        input = '\\n\\n'; \n                            \n                    item.summary += input; \n                }\n            }\n        },\n        process = function (raw) {\n            var result = {},\n                rawLines = raw.split('\\n');\n\n            for (var rawLineIndex in rawLines) {\n                var rawLine = rawLines[rawLineIndex],\n                    matched = false;\n\n                // Process the line\n                for (var optionIndex in lineProcessor.options) {\n                    var option = lineProcessor.options[optionIndex];\n                            \n                    if (option.test(rawLine)) {\n                        option.process(result, rawLine);\n                        matched = true;\n                    }\n                }\n                if (!matched)\n                    lineProcessor.primary.process(result, rawLine, rawLines[+rawLineIndex + 1]);\n            }\n            \n            return result;\n        };\n             \n    return {\n        process : process  \n    };\n})();\n      \nvar formatSyntax = (function () {\n    var formatHtmlParser = [\n            {\n                pattern : /\\*\\*([\\S ]+)\\*\\*|\\_\\_([\\S ]+)\\_\\_/ig,\n                process : function(val) {\n                    return val.replace(this.pattern, '<strong>$1$2</strong>');\n                }\n            },\n            {\n                pattern : /\\_([\\S ]+)\\_|\\*([\\S ]+)\\*/ig,\n                process : function(val) {\n                    return val.replace(this.pattern, '<em>$1$2</em>');\n                }\n            },\n            {\n                pattern : /\\`([\\S ]+)\\`/ig,\n                process : function(val) {\n                    return val.replace(this.pattern, '<code>$1</code>');\n                }\n            },\n            {\n                pattern : /\\[([\\S ]+)\\]\\(([\\S ]+)\\)/ig,\n                process : function(val) {\n                    return val.replace(this.pattern, '<a href=\"$2\">$1</a>');\n                }\n            }\n        ],\n        processString = function (val) {\n            if (val) {\n                for (var fomatterIndex in formatHtmlParser) \n                    val = formatHtmlParser[fomatterIndex].process(val);\n                val = val.replace(/\\n/g, '<br />');\n            }\n            else\n                val = '';\n            return val;\n        },\n        processList = function (items) { \n            var result = '',\n                hasPriorities = false;\n\n            for (var itemIndex in items) {\n                var item = items[itemIndex],\n                    attr = '';\n                    \n                if (item.priority) {\n                    attr = ' srn-priority=\"' + item.priority + '\"';\n                    hasPriorities = true;\n                }\n                result += '<li' + attr + '>';\n                if(item.categories) {\n                    result += '{';\n                    for(var categoryIndex in item.categories) {\n                        if(categoryIndex > 0) {\n                            result += ', ';\n                        }\n                        result += item.categories[categoryIndex];\n                    }\n                    result += '}';\n                }\n                \n                var summary = item.summary;\n                for (var fomatterIndex in formatHtmlParser) \n                    summary = formatHtmlParser[fomatterIndex].process(summary);\n                result += summary;\n                    \n                if (item.taskId)\n                    result += ' <a href=\"' + item.teskLink + '\">' + item.taskId + '</a>';\n                result += '</li>';\n            }\n\n            result =  '<ul' + (hasPriorities ? ' class=\"srn-priorities\"' : '') + '>' + result + '</ul>';\n                    \n            return result;\n        },\n        process = function (val) {\n            var result = '';\n              \n            result += '<div>' + processString(val.summary) + processList(val.items) + '</div>';\n            for (var featureIndex in val.sections) {\n                var feature = val.sections[featureIndex];\n                \n                result += '<div><h1>' + feature.name + '</h1>' + processString(feature.summary) + processList(feature.items) + '</div>';\n            }\n\n            return result; \n        };\n            \n    return {\n        process : process\n    };\n})();\n      \nvar formatJson = (function () {\n    var process = function(val) {\n        var result = '',\n            stack = [],\n            stackTop = { indent: '' },\n            strLen = val.length,\n            char = '',\n            indentStr = '    ',\n            newLine = '\\r\\n';\n        \n        for (var i = 0; i < strLen; i++) {\n            char = val[i];\n            \n            if (char == '{' || char == '[') {\n                stack.push(stackTop = {\n                    isArray: char == '[',\n                    isOutterArray: char == '[' && val[i + 1] == '[',\n                    indent: stackTop.indent + (!stackTop.isOutterArray ? indentStr : '')\n                }); \n            }\n            \n            if (char == '}' || (char == ']' && stackTop.isOutterArray))\n                result += newLine + (stack.length > 1 ? stack[stack.length - 2].indent : '');\n             \n            result += ((char == ']' && !stackTop.isOutterArray) || char == ':' ? ' ' : '') + char + (char == '[' || char == ':' || (char == ',' && stackTop.isArray) ? ' ' : '');\n             \n            if ((char == ',' && (!stackTop.isArray || stackTop.isOutterArray)) || char == '{' || (char == '[' && stackTop.isOutterArray))\n                result += newLine + stackTop.indent;\n            \n            if (char == '}' || char == ']') {\n                stack.pop();\n                stackTop = stack[stack.length - 1];\n            } \n        }\n\n        return result;\n    };\n            \n    return {\n        process : process\n    };\n})();\n  \nvar process = function(scope, text) { \n    var data = processSyntax.process(text),\n        stringData = formatJson.process(JSON.stringify(data)),\n        stringHtml = formatSyntax.process(data);\n\n    scope.find('.result').html(stringHtml);\n    scope.find('.object').html(stringData); \n};\n\nvar navigate = function (evt) {\n    $(location.hash).attr('checked', 'checked');\n};\n\n$(function() {\n\n    if (location.hash)\n        navigate();\n\n    $(window).on('hashchange', navigate);\n\n    $('.code').each(function(){\n        var scope = $(this).closest('.container'),\n            text = scope.find('.code').text();\n        process(scope, text);\n    });\n\n    $('.tabs a').click(function () {\n        var item = $(this),\n            index = item.attr('data-tab'),\n            ul = item.closest('ul'),\n            ulNext = ul.next();\n\n        ul.find('.active').removeClass('active');\n        ulNext.find('.active').removeClass('active');\n\n        ul.find('a[data-tab=\"' + index + '\"]').addClass('active');\n        ulNext.find('li[data-tab=\"' + index + '\"]').addClass('active'); \n    });\n\n    var execute = function() {\n        var scope = $('.execute').closest('.section-editor'),\n            text = scope.find('.editor').val();\n        process(scope, text);\n        scope.find('.result-container').show();\n    };\n    $('.execute').click(function() {\n        execute();\n    });\n    execute();\n});"}}}});